/**
* sematic Fluid Grid -- part of the utilities Namespace
*
* Based on Semantic.gs for LESS: http://lesscss.org/
*
* $author       Zone dev
* $email        frontend@thisiszone.com
* $url          http://www.thisiszone.com/
* $copyright    Copyright (c) 2012, thisiszone.com. All rights reserved.
* $version      1.0
*/

// Defaults which you can freely override
$column-width: $grid-width-columns;
$gutter-width: $grid-width-gutter;
$columns: $grid-num-columns;

// Utility function â€” you should never need to modify this
@function gridsystem-width($columns: $columns) {
    @return $column-width * $columns + $gutter-width * $columns;
}

// Set $total-width to 100% for a fluid layout
$total-width: 100%;

$min-width: 1000;
$correction: 0.5 / $min-width * 100 * 1%;

body {
    width: 100%;
    @include clearfix;
}

@mixin row($columns: $columns) {
    display: block;
    width: $total-width * ($gutter-width + gridsystem-width($columns)) / gridsystem-width($columns);
    margin-right: $total-width * $gutter-width * 0.5 / gridsystem-width($columns) * -1;
    margin-left: $total-width * $gutter-width * 0.5 / gridsystem-width($columns) * -1;
    *width: $total-width * ($gutter-width + gridsystem-width($columns)) / gridsystem-width($columns) - $correction;
    *margin: 0 $total-width * $gutter-width * 0.5 / gridsystem-width($columns) * -1 - $correction;
    @include clearfix;
}

@mixin column($x, $columns: $columns) {
    display: inline;
    float: left;
    width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width) / gridsystem-width($columns);
    margin-right: $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
    margin-left: $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
    *width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width) / gridsystem-width($columns) - $correction;
    *margin: 0 $total-width * $gutter-width * 0.5 / gridsystem-width($columns) - $correction;
}

@mixin column-alpha($x, $columns: $columns) {
    display: inline;
    float: left;
    width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width / 2) / gridsystem-width($columns);
    margin-right: $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
    margin-left: 0;
    *width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width / 2) / gridsystem-width($columns) - $correction;
    *margin: 0 $total-width * $gutter-width * 0.5 / gridsystem-width($columns) - $correction 0 0;
}

@mixin column-omega($x, $columns: $columns) {
    display: inline;
    float: left;
    width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width / 2) / gridsystem-width($columns);
    margin-right: 0;
    margin-left: $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
    *width: $total-width * (($gutter-width + $column-width) * $x - $gutter-width / 2) / gridsystem-width($columns) - $correction;
    *margin: 0 0 0 $total-width * $gutter-width * 0.5 / gridsystem-width($columns) - $correction;
}

@mixin push($offset: 1) {
    margin-left: $total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns) + $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
    *margin-left: $total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns) + $total-width * $gutter-width * 0.5 / gridsystem-width($columns) - $correction;
}

@mixin pull($offset: 1) {
    margin-right: $total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns) + $total-width * $gutter-width * 0.5 / gridsystem-width($columns);
    *margin-right: $total-width * ($gutter-width + $column-width) * $offset / gridsystem-width($columns) + $total-width * $gutter-width * 0.5 / gridsystem-width($columns) - $correction;
}

@mixin no-column {
    display: block;
    margin: 0 auto;
    float: none;
    width: 100%;
}

%flow-in-grid {
    display: inline;
    float: left;
}